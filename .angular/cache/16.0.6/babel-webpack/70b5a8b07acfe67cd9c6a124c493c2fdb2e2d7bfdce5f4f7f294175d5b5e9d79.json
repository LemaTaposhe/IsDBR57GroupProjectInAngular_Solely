{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nexport class CartService {\n  constructor() {\n    this.cartItems = [];\n    this.cartCountSubject = new BehaviorSubject(0); // This tracks the count of unique products\n    this.cartCount$ = this.cartCountSubject.asObservable(); // Expose observable\n  }\n  // Add or update product in the cart\n  addToCart(product) {\n    const existingProductIndex = this.cartItems.findIndex(item => item.productId === product.productId);\n    if (existingProductIndex > -1) {\n      // Update existing product quantity if needed\n      this.cartItems[existingProductIndex] = {\n        ...this.cartItems[existingProductIndex],\n        quantity: product.quantity || 1\n      };\n    } else {\n      // Add new product to cart\n      this.cartItems.push({\n        ...product,\n        quantity: product.quantity || 1\n      });\n    }\n    this.updateCartCount();\n  }\n  // Update the cart count to reflect the number of unique products\n  updateCartCount() {\n    this.cartCountSubject.next(this.cartItems.length); // Count of unique products\n  }\n  // Get all items in the cart\n  getCartItems() {\n    return this.cartItems;\n  }\n  // Get the total number of unique products in the cart as observable\n  getCartItemCount() {\n    return this.cartCount$;\n  }\n  // Optionally, you might add a method to remove items from the cart\n  removeFromCart(productId) {\n    this.cartItems = this.cartItems.filter(item => item.productId !== productId);\n    this.updateCartCount();\n  }\n  // Optionally, you might add a method to clear the cart\n  clearCart() {\n    this.cartItems = [];\n    this.updateCartCount();\n  }\n  static #_ = this.ɵfac = function CartService_Factory(t) {\n    return new (t || CartService)();\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: CartService,\n    factory: CartService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["BehaviorSubject","CartService","constructor","cartItems","cartCountSubject","cartCount$","asObservable","addToCart","product","existingProductIndex","findIndex","item","productId","quantity","push","updateCartCount","next","length","getCartItems","getCartItemCount","removeFromCart","filter","clearCart","_","_2","factory","ɵfac","providedIn"],"sources":["G:\\IsDB- Bisew Class-1\\UI-18-08-24\\UI-Font-01\\src\\app\\cart\\cart.service.ts"],"sourcesContent":["// src/app/services/cart.service.ts\r\n\r\nimport { Injectable } from '@angular/core';\r\nimport { BehaviorSubject, Observable } from 'rxjs';\r\nimport { Product } from '../product/product.model';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class CartService {\r\n  private cartItems: Product[] = [];\r\n  private cartCountSubject = new BehaviorSubject<number>(0); // This tracks the count of unique products\r\n\r\n  cartCount$ = this.cartCountSubject.asObservable(); // Expose observable\r\n\r\n  constructor() { }\r\n\r\n  // Add or update product in the cart\r\n  addToCart(product: Product): void {\r\n    const existingProductIndex = this.cartItems.findIndex(item => item.productId === product.productId);\r\n    if (existingProductIndex > -1) {\r\n      // Update existing product quantity if needed\r\n      this.cartItems[existingProductIndex] = { ...this.cartItems[existingProductIndex], quantity: product.quantity || 1 };\r\n    } else {\r\n      // Add new product to cart\r\n      this.cartItems.push({ ...product, quantity: product.quantity || 1 });\r\n    }\r\n    this.updateCartCount();\r\n  }\r\n\r\n  // Update the cart count to reflect the number of unique products\r\n  private updateCartCount(): void {\r\n    this.cartCountSubject.next(this.cartItems.length); // Count of unique products\r\n  }\r\n\r\n  // Get all items in the cart\r\n  getCartItems(): Product[] {\r\n    return this.cartItems;\r\n  }\r\n\r\n  // Get the total number of unique products in the cart as observable\r\n  getCartItemCount(): Observable<number> {\r\n    return this.cartCount$;\r\n  }\r\n\r\n  // Optionally, you might add a method to remove items from the cart\r\n  removeFromCart(productId: number): void {\r\n    this.cartItems = this.cartItems.filter(item => item.productId !== productId);\r\n    this.updateCartCount();\r\n  }\r\n\r\n  // Optionally, you might add a method to clear the cart\r\n  clearCart(): void {\r\n    this.cartItems = [];\r\n    this.updateCartCount();\r\n  }\r\n}\r\n"],"mappings":"AAGA,SAASA,eAAe,QAAoB,MAAM;;AAMlD,OAAM,MAAOC,WAAW;EAMtBC,YAAA;IALQ,KAAAC,SAAS,GAAc,EAAE;IACzB,KAAAC,gBAAgB,GAAG,IAAIJ,eAAe,CAAS,CAAC,CAAC,CAAC,CAAC;IAE3D,KAAAK,UAAU,GAAG,IAAI,CAACD,gBAAgB,CAACE,YAAY,EAAE,CAAC,CAAC;EAEnC;EAEhB;EACAC,SAASA,CAACC,OAAgB;IACxB,MAAMC,oBAAoB,GAAG,IAAI,CAACN,SAAS,CAACO,SAAS,CAACC,IAAI,IAAIA,IAAI,CAACC,SAAS,KAAKJ,OAAO,CAACI,SAAS,CAAC;IACnG,IAAIH,oBAAoB,GAAG,CAAC,CAAC,EAAE;MAC7B;MACA,IAAI,CAACN,SAAS,CAACM,oBAAoB,CAAC,GAAG;QAAE,GAAG,IAAI,CAACN,SAAS,CAACM,oBAAoB,CAAC;QAAEI,QAAQ,EAAEL,OAAO,CAACK,QAAQ,IAAI;MAAC,CAAE;KACpH,MAAM;MACL;MACA,IAAI,CAACV,SAAS,CAACW,IAAI,CAAC;QAAE,GAAGN,OAAO;QAAEK,QAAQ,EAAEL,OAAO,CAACK,QAAQ,IAAI;MAAC,CAAE,CAAC;;IAEtE,IAAI,CAACE,eAAe,EAAE;EACxB;EAEA;EACQA,eAAeA,CAAA;IACrB,IAAI,CAACX,gBAAgB,CAACY,IAAI,CAAC,IAAI,CAACb,SAAS,CAACc,MAAM,CAAC,CAAC,CAAC;EACrD;EAEA;EACAC,YAAYA,CAAA;IACV,OAAO,IAAI,CAACf,SAAS;EACvB;EAEA;EACAgB,gBAAgBA,CAAA;IACd,OAAO,IAAI,CAACd,UAAU;EACxB;EAEA;EACAe,cAAcA,CAACR,SAAiB;IAC9B,IAAI,CAACT,SAAS,GAAG,IAAI,CAACA,SAAS,CAACkB,MAAM,CAACV,IAAI,IAAIA,IAAI,CAACC,SAAS,KAAKA,SAAS,CAAC;IAC5E,IAAI,CAACG,eAAe,EAAE;EACxB;EAEA;EACAO,SAASA,CAAA;IACP,IAAI,CAACnB,SAAS,GAAG,EAAE;IACnB,IAAI,CAACY,eAAe,EAAE;EACxB;EAAC,QAAAQ,CAAA,G;qBA9CUtB,WAAW;EAAA;EAAA,QAAAuB,EAAA,G;WAAXvB,WAAW;IAAAwB,OAAA,EAAXxB,WAAW,CAAAyB,IAAA;IAAAC,UAAA,EAFV;EAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}