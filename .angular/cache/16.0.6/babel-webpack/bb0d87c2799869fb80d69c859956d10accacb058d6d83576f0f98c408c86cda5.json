{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"./login.service\";\nimport * as i3 from \"../Login/auth.service\";\nimport * as i4 from \"@angular/router\";\nimport * as i5 from \"@angular/common\";\nfunction LoginComponent_div_8_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1, \"Email is required.\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction LoginComponent_div_8_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1, \"Invalid email format.\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction LoginComponent_div_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 10);\n    i0.ɵɵtemplate(1, LoginComponent_div_8_div_1_Template, 2, 0, \"div\", 11);\n    i0.ɵɵtemplate(2, LoginComponent_div_8_div_2_Template, 2, 0, \"div\", 11);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    let tmp_0_0;\n    let tmp_1_0;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", (tmp_0_0 = ctx_r0.loginForm.get(\"email\")) == null ? null : tmp_0_0.errors == null ? null : tmp_0_0.errors[\"required\"]);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", (tmp_1_0 = ctx_r0.loginForm.get(\"email\")) == null ? null : tmp_1_0.errors == null ? null : tmp_1_0.errors[\"email\"]);\n  }\n}\nfunction LoginComponent_div_13_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1, \"Password is required.\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction LoginComponent_div_13_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 10);\n    i0.ɵɵtemplate(1, LoginComponent_div_13_div_1_Template, 2, 0, \"div\", 11);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    let tmp_0_0;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", (tmp_0_0 = ctx_r1.loginForm.get(\"password\")) == null ? null : tmp_0_0.errors == null ? null : tmp_0_0.errors[\"required\"]);\n  }\n}\nexport class LoginComponent {\n  constructor(fb, loginService, authService, router) {\n    this.fb = fb;\n    this.loginService = loginService;\n    this.authService = authService;\n    this.router = router;\n    this.errorMessage = null;\n    this.loginForm = this.fb.group({\n      email: ['', [Validators.required, Validators.email]],\n      password: ['', Validators.required]\n    });\n  }\n  onSubmit() {\n    if (this.loginForm.valid) {\n      const loginData = this.loginForm.value;\n      this.loginService.login(loginData).subscribe(response => {\n        console.log('Login successful!', response);\n        this.authService.setUser(response); // Assuming response contains user details\n        this.router.navigate(['/products']);\n        // this.loginForm.reset();\n        // this.errorMessage = null;\n      }, error => {\n        console.error('Login failed', error);\n        this.errorMessage = 'Invalid email or password. Please try again.';\n      });\n      // } else {\n      //   this.errorMessage = 'Please fill in the required fields.';\n      // }\n    }\n  }\n  static #_ = this.ɵfac = function LoginComponent_Factory(t) {\n    return new (t || LoginComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.LoginService), i0.ɵɵdirectiveInject(i3.AuthService), i0.ɵɵdirectiveInject(i4.Router));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: LoginComponent,\n    selectors: [[\"app-login\"]],\n    decls: 16,\n    vars: 4,\n    consts: [[1, \"container\", \"mt-4\"], [1, \"mb-3\"], [3, \"formGroup\", \"ngSubmit\"], [1, \"form-group\"], [\"for\", \"email\"], [\"id\", \"email\", \"formControlName\", \"email\", 1, \"form-control\"], [\"class\", \"text-danger\", 4, \"ngIf\"], [\"for\", \"password\"], [\"id\", \"password\", \"type\", \"password\", \"formControlName\", \"password\", 1, \"form-control\"], [\"type\", \"submit\", 1, \"btn\", \"btn-primary\", 3, \"disabled\"], [1, \"text-danger\"], [4, \"ngIf\"]],\n    template: function LoginComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"h2\", 1);\n        i0.ɵɵtext(2, \"Login\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(3, \"form\", 2);\n        i0.ɵɵlistener(\"ngSubmit\", function LoginComponent_Template_form_ngSubmit_3_listener() {\n          return ctx.onSubmit();\n        });\n        i0.ɵɵelementStart(4, \"div\", 3)(5, \"label\", 4);\n        i0.ɵɵtext(6, \"Email\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(7, \"input\", 5);\n        i0.ɵɵtemplate(8, LoginComponent_div_8_Template, 3, 2, \"div\", 6);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(9, \"div\", 3)(10, \"label\", 7);\n        i0.ɵɵtext(11, \"Password\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(12, \"input\", 8);\n        i0.ɵɵtemplate(13, LoginComponent_div_13_Template, 2, 1, \"div\", 6);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(14, \"button\", 9);\n        i0.ɵɵtext(15, \"Login\");\n        i0.ɵɵelementEnd()()();\n      }\n      if (rf & 2) {\n        let tmp_1_0;\n        let tmp_2_0;\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"formGroup\", ctx.loginForm);\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"ngIf\", ((tmp_1_0 = ctx.loginForm.get(\"email\")) == null ? null : tmp_1_0.invalid) && ((tmp_1_0 = ctx.loginForm.get(\"email\")) == null ? null : tmp_1_0.touched));\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"ngIf\", ((tmp_2_0 = ctx.loginForm.get(\"password\")) == null ? null : tmp_2_0.invalid) && ((tmp_2_0 = ctx.loginForm.get(\"password\")) == null ? null : tmp_2_0.touched));\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"disabled\", ctx.loginForm.invalid);\n      }\n    },\n    dependencies: [i5.NgIf, i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.FormGroupDirective, i1.FormControlName],\n    styles: [\"\\n (()[_ngcontent-%COMP%]   =[_ngcontent-%COMP%] >  { // webpackBootstrap\\n\\n \\t\\\"use strict\\\";\\n\\n \\t\\n\\n \\t\\n\\n })()[_ngcontent-%COMP%]\\n;\"]\n  });\n}","map":{"version":3,"names":["Validators","i0","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵtemplate","LoginComponent_div_8_div_1_Template","LoginComponent_div_8_div_2_Template","ɵɵadvance","ɵɵproperty","tmp_0_0","ctx_r0","loginForm","get","errors","tmp_1_0","LoginComponent_div_13_div_1_Template","ctx_r1","LoginComponent","constructor","fb","loginService","authService","router","errorMessage","group","email","required","password","onSubmit","valid","loginData","value","login","subscribe","response","console","log","setUser","navigate","error","_","ɵɵdirectiveInject","i1","FormBuilder","i2","LoginService","i3","AuthService","i4","Router","_2","selectors","decls","vars","consts","template","LoginComponent_Template","rf","ctx","ɵɵlistener","LoginComponent_Template_form_ngSubmit_3_listener","ɵɵelement","LoginComponent_div_8_Template","LoginComponent_div_13_Template","invalid","touched","tmp_2_0"],"sources":["G:\\IsDB- Bisew Class-1\\UI-18-08-24\\UI-Font-01\\src\\app\\Login\\login.component.ts","G:\\IsDB- Bisew Class-1\\UI-18-08-24\\UI-Font-01\\src\\app\\Login\\login.component.html"],"sourcesContent":["// import { Component } from '@angular/core';\r\n// import { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\n// import { LoginService } from './login.service';\r\n// import { Login } from './login.model';\r\n\r\n// @Component({\r\n//   selector: 'app-login',\r\n//   templateUrl: './login.component.html',\r\n//   styleUrls: ['./login.component.css']\r\n// })\r\n// export class LoginComponent {\r\n//   loginForm: FormGroup;\r\n\r\n//   constructor(private fb: FormBuilder, private loginService: LoginService) {\r\n//     this.loginForm = this.fb.group({\r\n//       email: ['', [Validators.required, Validators.email]],\r\n//       password: ['', Validators.required]\r\n//     });\r\n//   }\r\n\r\n//   onSubmit() {\r\n//     if (this.loginForm.valid) {\r\n//       const loginData: Login = this.loginForm.value;\r\n//       this.loginService.login(loginData).subscribe(\r\n//         response => {\r\n//           // Handle successful login\r\n//           console.log('Login successful!', response);\r\n//           this.loginForm.reset();\r\n//         },\r\n//         error => {\r\n//           // Handle error\r\n//           console.error('Login failed', error);\r\n//         }\r\n//       );\r\n//     }\r\n//   }\r\n// }\r\n////------------19\r\n\r\n// import { Component } from '@angular/core';\r\n// import { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\n// import { LoginService } from './login.service';\r\n// import { Login } from './login.model';\r\n// import { Router } from '@angular/router'; // Import Router to navigate after login\r\n// import { AuthService } from '../Login/auth.service'; // Assuming an AuthService to manage user state\r\n\r\n// @Component({\r\n//   selector: 'app-login',\r\n//   templateUrl: './login.component.html',\r\n//   styleUrls: ['./login.component.css']\r\n// })\r\n// export class LoginComponent {\r\n//   loginForm: FormGroup;\r\n//   errorMessage: string | null = null;\r\n\r\n//   constructor(\r\n//     private fb: FormBuilder,\r\n//     private loginService: LoginService,\r\n//     private authService: AuthService, // Injecting AuthService to manage user state\r\n//     private router: Router // Injecting Router to navigate to a different route on successful login\r\n//   ) {\r\n//     this.loginForm = this.fb.group({\r\n//       email: ['', [Validators.required, Validators.email]],\r\n//       password: ['', Validators.required]\r\n//     });\r\n//   }\r\n\r\n//   onSubmit() {\r\n//     if (this.loginForm.valid) {\r\n//       const loginData: Login = this.loginForm.value;\r\n//       this.loginService.login(loginData).subscribe(\r\n//         response => {\r\n//           // Handle successful login\r\n//           console.log('Login successful!', response);\r\n//           this.authService.setUser(response); // Storing user details in the AuthService\r\n//           this.router.navigate(['/']); // Redirect to the home page or another route after login\r\n//           this.loginForm.reset(); // Reset the form\r\n//         },\r\n//         error => {\r\n//           // Handle login failure\r\n//           console.error('Login failed', error);\r\n//           this.errorMessage = 'Invalid email or password. Please try again.'; // Set error message to display in UI\r\n//         }\r\n//       );\r\n//     }\r\n//   }\r\n// }\r\nimport { Component } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { LoginService } from './login.service';\r\nimport { Login } from './login.model';\r\nimport { Router } from '@angular/router';\r\nimport { AuthService } from '../Login/auth.service';\r\n\r\n@Component({\r\n  selector: 'app-login',\r\n  templateUrl: './login.component.html',\r\n  styleUrls: ['./login.component.css']\r\n})\r\nexport class LoginComponent {\r\n  loginForm: FormGroup;\r\n  errorMessage: string | null = null;\r\n\r\n  constructor(\r\n    private fb: FormBuilder,\r\n    private loginService: LoginService,\r\n    private authService: AuthService,\r\n    private router: Router\r\n  ) {\r\n    this.loginForm = this.fb.group({\r\n      email: ['', [Validators.required, Validators.email]],\r\n      password: ['', Validators.required]\r\n    });\r\n  }\r\n\r\n  onSubmit() {\r\n    if (this.loginForm.valid) {\r\n      const loginData: Login = this.loginForm.value;\r\n      this.loginService.login(loginData).subscribe(\r\n        response => {\r\n          console.log('Login successful!', response);\r\n          this.authService.setUser(response); // Assuming response contains user details\r\n          this.router.navigate(['/products']);\r\n          // this.loginForm.reset();\r\n          // this.errorMessage = null;\r\n        },\r\n        error => {\r\n          console.error('Login failed', error);\r\n          this.errorMessage = 'Invalid email or password. Please try again.';\r\n        }\r\n      );\r\n\r\n    // } else {\r\n    //   this.errorMessage = 'Please fill in the required fields.';\r\n    // }\r\n  }\r\n  }}\r\n","<div class=\"container mt-4\">\r\n    <h2 class=\"mb-3\">Login</h2>\r\n  \r\n    <form [formGroup]=\"loginForm\" (ngSubmit)=\"onSubmit()\">\r\n      <div class=\"form-group\">\r\n        <label for=\"email\">Email</label>\r\n        <input id=\"email\" formControlName=\"email\" class=\"form-control\" />\r\n        <div *ngIf=\"loginForm.get('email')?.invalid && loginForm.get('email')?.touched\" class=\"text-danger\">\r\n          <div *ngIf=\"loginForm.get('email')?.errors?.['required']\">Email is required.</div>\r\n          <div *ngIf=\"loginForm.get('email')?.errors?.['email']\">Invalid email format.</div>\r\n        </div>\r\n      </div>\r\n  \r\n      <div class=\"form-group\">\r\n        <label for=\"password\">Password</label>\r\n        <input id=\"password\" type=\"password\" formControlName=\"password\" class=\"form-control\" />\r\n        <div *ngIf=\"loginForm.get('password')?.invalid && loginForm.get('password')?.touched\" class=\"text-danger\">\r\n          <div *ngIf=\"loginForm.get('password')?.errors?.['required']\">Password is required.</div>\r\n        </div>\r\n      </div>\r\n  \r\n      <button type=\"submit\" class=\"btn btn-primary\" [disabled]=\"loginForm.invalid\" >Login</button>\r\n    </form>\r\n  </div>\r\n  "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}