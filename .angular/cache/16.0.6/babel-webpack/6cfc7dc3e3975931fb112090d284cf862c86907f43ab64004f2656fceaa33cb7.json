{"ast":null,"code":"import { BehaviorSubject, Observable } from 'rxjs';\nimport { v4 as uuidv4 } from 'uuid'; // Import UUID library\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class CartService {\n  constructor(http) {\n    this.http = http;\n    this.cartItems = [];\n    this.cartCountSubject = new BehaviorSubject(0);\n    this.cartCount$ = this.cartCountSubject.asObservable();\n    this.cartApiUrl = 'http://localhost:5000/api/cart/post'; // Your Cart API endpoint\n    this.cartItemApiUrl = 'http://localhost:5000/api/cart/post'; // Your CartItem API endpoint\n  }\n  addToCart(product) {\n    const existingProductIndex = this.cartItems.findIndex(item => item.productId === product.productId);\n    if (existingProductIndex > -1) {\n      this.cartItems[existingProductIndex].quantity += product.quantity || 1;\n    } else {\n      this.cartItems.push({\n        ...product,\n        quantity: product.quantity || 1\n      });\n    }\n    this.updateCartCount();\n  }\n  updateCartCount() {\n    this.cartCountSubject.next(this.cartItems.length);\n  }\n  getCartItems() {\n    return this.cartItems;\n  }\n  getCartItemCount() {\n    return this.cartCount$;\n  }\n  removeFromCart(productId) {\n    this.cartItems = this.cartItems.filter(item => item.productId !== productId);\n    this.updateCartCount();\n  }\n  clearCart() {\n    this.cartItems = [];\n    this.updateCartCount();\n  }\n  // Method to submit cart and cart items to the backend\n  submitCart() {\n    const cartId = uuidv4(); // Generate a new UUID for the cart\n    const cartItems = this.cartItems.map(item => ({\n      productId: item.productId,\n      quantity: item.quantity || 1,\n      price: item.price,\n      cartId: {\n        cartId\n      }\n    }));\n    // Make HTTP requests to insert data\n    return new Observable(observer => {\n      this.http.post(this.cartApiUrl, {\n        cartId\n      }).subscribe({\n        next: () => {\n          this.http.post(this.cartItemApiUrl, cartItems).subscribe({\n            next: () => {\n              this.clearCart(); // Clear the cart after submission\n              observer.next();\n              observer.complete();\n            },\n            error: err => {\n              console.error('Error submitting cart items:', err);\n              observer.error(err);\n            }\n          });\n        },\n        error: err => {\n          console.error('Error creating cart:', err);\n          observer.error(err);\n        }\n      });\n    });\n  }\n  static #_ = this.ɵfac = function CartService_Factory(t) {\n    return new (t || CartService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: CartService,\n    factory: CartService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["BehaviorSubject","Observable","v4","uuidv4","CartService","constructor","http","cartItems","cartCountSubject","cartCount$","asObservable","cartApiUrl","cartItemApiUrl","addToCart","product","existingProductIndex","findIndex","item","productId","quantity","push","updateCartCount","next","length","getCartItems","getCartItemCount","removeFromCart","filter","clearCart","submitCart","cartId","map","price","observer","post","subscribe","complete","error","err","console","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["G:\\IsDB- Bisew Class-1\\UI-18-08-24\\UI-Font-01\\src\\app\\cart\\cart.service.ts"],"sourcesContent":["// src/app/services/cart.service.ts\r\n\r\nimport { Injectable } from '@angular/core';\r\nimport { BehaviorSubject, Observable, of } from 'rxjs';\r\nimport { Product } from '../product/product.model';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { v4 as uuidv4 } from 'uuid'; // Import UUID library\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class CartService {\r\n  private cartItems: Product[] = [];\r\n  private cartCountSubject = new BehaviorSubject<number>(0);\r\n  cartCount$ = this.cartCountSubject.asObservable();\r\n\r\n  private cartApiUrl = 'http://localhost:5000/api/cart/post'; // Your Cart API endpoint\r\n  private cartItemApiUrl = 'http://localhost:5000/api/cart/post'; // Your CartItem API endpoint\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  addToCart(product: Product): void {\r\n    const existingProductIndex = this.cartItems.findIndex(item => item.productId === product.productId);\r\n    if (existingProductIndex > -1) {\r\n      this.cartItems[existingProductIndex].quantity += product.quantity || 1;\r\n    } else {\r\n      this.cartItems.push({ ...product, quantity: product.quantity || 1 });\r\n    }\r\n    this.updateCartCount();\r\n  }\r\n\r\n  private updateCartCount(): void {\r\n    this.cartCountSubject.next(this.cartItems.length);\r\n  }\r\n\r\n  getCartItems(): Product[] {\r\n    return this.cartItems;\r\n  }\r\n\r\n  getCartItemCount(): Observable<number> {\r\n    return this.cartCount$;\r\n  }\r\n\r\n  removeFromCart(productId: number): void {\r\n    this.cartItems = this.cartItems.filter(item => item.productId !== productId);\r\n    this.updateCartCount();\r\n  }\r\n\r\n  clearCart(): void {\r\n    this.cartItems = [];\r\n    this.updateCartCount();\r\n  }\r\n\r\n  // Method to submit cart and cart items to the backend\r\n  submitCart(): Observable<void> {\r\n    const cartId = uuidv4(); // Generate a new UUID for the cart\r\n    const cartItems = this.cartItems.map(item => ({\r\n      productId: item.productId,\r\n      quantity: item.quantity || 1,\r\n      price: item.price,\r\n      cartId:  { cartId }\r\n    }));\r\n\r\n    // Make HTTP requests to insert data\r\n    return new Observable(observer => {\r\n      this.http.post<void>(this.cartApiUrl, { cartId }).subscribe({\r\n        next: () => {\r\n          this.http.post<void>(this.cartItemApiUrl, cartItems).subscribe({\r\n            next: () => {\r\n              this.clearCart(); // Clear the cart after submission\r\n              observer.next();\r\n              observer.complete();\r\n            },\r\n            error: err => {\r\n              console.error('Error submitting cart items:', err);\r\n              observer.error(err);\r\n            }\r\n          });\r\n        },\r\n        error: err => {\r\n          console.error('Error creating cart:', err);\r\n          observer.error(err);\r\n        }\r\n      });\r\n    });\r\n  }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}