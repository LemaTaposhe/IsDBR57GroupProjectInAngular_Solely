{"ast":null,"code":"import { environment } from 'src/environments/environment.development';\nimport { v4 as uuidv4 } from 'uuid'; // UUID generator\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class CartService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = `${environment.apiBaseUrl}/cart`;\n  }\n  addProductToCart(cartId, productId, quantity, price) {\n    const cartPayload = {\n      cartId: cartId || uuidv4(),\n      customerId: null,\n      items: [{\n        productId: productId,\n        quantity: quantity,\n        price: price\n      }]\n    };\n    return this.http.post(this.apiUrl, cartPayload);\n  }\n  updateCartItem(cartId, items) {\n    const updatePayload = {\n      cartId: cartId,\n      items: items\n    };\n    return this.http.put(`${this.apiUrl}/${cartId}`, updatePayload);\n  }\n  getCartItems(cartId) {\n    return this.http.get(`${this.apiUrl}/${cartId}`);\n  }\n  clearCart(cartId) {\n    return this.http.delete(`${this.apiUrl}/${cartId}`);\n  }\n  static #_ = this.ɵfac = function CartService_Factory(t) {\n    return new (t || CartService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: CartService,\n    factory: CartService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["environment","v4","uuidv4","CartService","constructor","http","apiUrl","apiBaseUrl","addProductToCart","cartId","productId","quantity","price","cartPayload","customerId","items","post","updateCartItem","updatePayload","put","getCartItems","get","clearCart","delete","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["G:\\IsDB- Bisew Class-1\\UI-18-08-24\\UI-Font-01\\src\\app\\cart\\cart.service.ts"],"sourcesContent":["\r\n// // src/app/cart/cart.service.ts\r\n// import { Injectable } from '@angular/core';\r\n// import { CartItem } from './cart-item.model'; // Adjust the import path if necessary\r\n// import { Product } from '../product/product.model';\r\n\r\n// @Injectable({\r\n//   providedIn: 'root'\r\n// })\r\n// export class CartService {\r\n//   private cart: CartItem[] = [];\r\n\r\n//   addProductToCart(product: Product, quantity: number): void {\r\n//     const existingProduct = this.cart.find(p => p.product.productId === product.productId);\r\n//     if (existingProduct) {\r\n//       existingProduct.quantity += quantity;\r\n//     } else {\r\n//       this.cart.push({ product, quantity });\r\n//     }\r\n//   }\r\n\r\n//   getCartItems(): CartItem[] {\r\n//     return this.cart;\r\n//   }\r\n\r\n//   getCartItemCount(): number {\r\n//     return this.cart.reduce((total, item) => total + item.quantity, 0);\r\n//   }\r\n// }\r\n//-------------------------------------------------------------------------\r\n\r\nimport { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { environment } from 'src/environments/environment.development';\r\nimport { CartItem } from './cartItem.model'; // Adjust path\r\nimport { v4 as uuidv4 } from 'uuid'; // UUID generator\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class CartService {\r\n  private apiUrl = `${environment.apiBaseUrl}/cart`;\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  addProductToCart(cartId: string, productId: number, quantity: number, price: number): Observable<void> {\r\n    const cartPayload = {\r\n      cartId: cartId || uuidv4(), // Generate cartId if not provided\r\n      customerId: null, // Or pass actual customerId if available\r\n      items: [\r\n        {\r\n          productId: productId,\r\n          quantity: quantity,\r\n          price: price\r\n        }\r\n      ]\r\n    };\r\n    return this.http.post<void>(this.apiUrl, cartPayload);\r\n  }\r\n\r\n  updateCartItem(cartId: string, items: CartItem[]): Observable<void> {\r\n    const updatePayload = {\r\n      cartId: cartId,\r\n      items: items\r\n    };\r\n    return this.http.put<void>(`${this.apiUrl}/${cartId}`, updatePayload);\r\n  }\r\n\r\n  getCartItems(cartId: string): Observable<CartItem[]> {\r\n    return this.http.get<CartItem[]>(`${this.apiUrl}/${cartId}`);\r\n  }\r\n\r\n  clearCart(cartId: string): Observable<void> {\r\n    return this.http.delete<void>(`${this.apiUrl}/${cartId}`);\r\n  }\r\n}\r\n"],"mappings":"AAkCA,SAASA,WAAW,QAAQ,0CAA0C;AAEtE,SAASC,EAAE,IAAIC,MAAM,QAAQ,MAAM,CAAC,CAAC;;;AAKrC,OAAM,MAAOC,WAAW;EAGtBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAFhB,KAAAC,MAAM,GAAG,GAAGN,WAAW,CAACO,UAAU,OAAO;EAEV;EAEvCC,gBAAgBA,CAACC,MAAc,EAAEC,SAAiB,EAAEC,QAAgB,EAAEC,KAAa;IACjF,MAAMC,WAAW,GAAG;MAClBJ,MAAM,EAAEA,MAAM,IAAIP,MAAM,EAAE;MAC1BY,UAAU,EAAE,IAAI;MAChBC,KAAK,EAAE,CACL;QACEL,SAAS,EAAEA,SAAS;QACpBC,QAAQ,EAAEA,QAAQ;QAClBC,KAAK,EAAEA;OACR;KAEJ;IACD,OAAO,IAAI,CAACP,IAAI,CAACW,IAAI,CAAO,IAAI,CAACV,MAAM,EAAEO,WAAW,CAAC;EACvD;EAEAI,cAAcA,CAACR,MAAc,EAAEM,KAAiB;IAC9C,MAAMG,aAAa,GAAG;MACpBT,MAAM,EAAEA,MAAM;MACdM,KAAK,EAAEA;KACR;IACD,OAAO,IAAI,CAACV,IAAI,CAACc,GAAG,CAAO,GAAG,IAAI,CAACb,MAAM,IAAIG,MAAM,EAAE,EAAES,aAAa,CAAC;EACvE;EAEAE,YAAYA,CAACX,MAAc;IACzB,OAAO,IAAI,CAACJ,IAAI,CAACgB,GAAG,CAAa,GAAG,IAAI,CAACf,MAAM,IAAIG,MAAM,EAAE,CAAC;EAC9D;EAEAa,SAASA,CAACb,MAAc;IACtB,OAAO,IAAI,CAACJ,IAAI,CAACkB,MAAM,CAAO,GAAG,IAAI,CAACjB,MAAM,IAAIG,MAAM,EAAE,CAAC;EAC3D;EAAC,QAAAe,CAAA,G;qBAlCUrB,WAAW,EAAAsB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAX1B,WAAW;IAAA2B,OAAA,EAAX3B,WAAW,CAAA4B,IAAA;IAAAC,UAAA,EAFV;EAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}