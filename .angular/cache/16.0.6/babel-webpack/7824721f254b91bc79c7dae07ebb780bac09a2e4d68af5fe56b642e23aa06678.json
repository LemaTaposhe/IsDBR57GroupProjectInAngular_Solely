{"ast":null,"code":"import { BehaviorSubject, Observable } from 'rxjs';\nimport { v4 as uuidv4 } from 'uuid'; // Import UUID library\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class CartService {\n  constructor(http) {\n    this.http = http;\n    this.cartItems = [];\n    this.cartCountSubject = new BehaviorSubject(0);\n    this.cartCount$ = this.cartCountSubject.asObservable();\n    this.apiUrl = 'http://localhost:5000/api/cart/post'; // Shared Cart and CartItem API endpoint\n  }\n  addToCart(product) {\n    const existingProductIndex = this.cartItems.findIndex(item => item.productId === product.productId);\n    if (existingProductIndex > -1) {\n      this.cartItems[existingProductIndex].quantity += product.quantity || 1;\n    } else {\n      this.cartItems.push({\n        ...product,\n        quantity: product.quantity || 1\n      });\n    }\n    this.updateCartCount();\n  }\n  updateCartCount() {\n    this.cartCountSubject.next(this.cartItems.length);\n  }\n  getCartItems() {\n    return this.cartItems;\n  }\n  getCartItemCount() {\n    return this.cartCount$;\n  }\n  removeFromCart(productId) {\n    this.cartItems = this.cartItems.filter(item => item.productId !== productId);\n    this.updateCartCount();\n  }\n  clearCart() {\n    this.cartItems = [];\n    this.updateCartCount();\n  }\n  // Method to submit cart and cart items to the backend\n  submitCart() {\n    const cartId = uuidv4(); // Generate a new UUID for the cart\n    const todayDate = new Date().toISOString(); // Get today's date\n    // Map cart items to include createDate\n    const cartItems = this.cartItems.map(item => ({\n      createDate: todayDate,\n      productId: item.productId,\n      quantity: item.quantity || 1,\n      price: item.price,\n      cartId: cartId // Use the generated cartId for each cart item\n    }));\n    // Construct the request payload for creating the cart\n    const cartPayload = {\n      cartId\n    };\n    // Construct the request payload for creating cart items\n    const cartItemsPayload = {\n      cartId,\n      items: cartItems\n    };\n    // Save cartId in localStorage\n    localStorage.setItem('currentCartId', cartId);\n    // Make HTTP requests to insert data\n    return new Observable(observer => {\n      this.http.post(this.apiUrl, cartPayload).subscribe({\n        next: () => {\n          this.http.post(this.apiUrl, cartItemsPayload).subscribe({\n            next: () => {\n              this.clearCart(); // Clear the cart after submission\n              observer.next();\n              observer.complete();\n            },\n            error: err => {\n              console.error('Error submitting cart items:', err);\n              observer.error(err);\n            }\n          });\n        },\n        error: err => {\n          console.error('Error creating cart:', err);\n          observer.error(err);\n        }\n      });\n    });\n  }\n  // Method to get cart items by cartId\n  getCartItemsByCartId(cartId) {\n    return this.http.get(`http://localhost:5000/api/cart/{cartId}`);\n  }\n  static #_ = this.ɵfac = function CartService_Factory(t) {\n    return new (t || CartService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: CartService,\n    factory: CartService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["BehaviorSubject","Observable","v4","uuidv4","CartService","constructor","http","cartItems","cartCountSubject","cartCount$","asObservable","apiUrl","addToCart","product","existingProductIndex","findIndex","item","productId","quantity","push","updateCartCount","next","length","getCartItems","getCartItemCount","removeFromCart","filter","clearCart","submitCart","cartId","todayDate","Date","toISOString","map","createDate","price","cartPayload","cartItemsPayload","items","localStorage","setItem","observer","post","subscribe","complete","error","err","console","getCartItemsByCartId","get","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["G:\\IsDB- Bisew Class-1\\UI-18-08-24\\UI-Font-01\\src\\app\\cart\\cart.service.ts"],"sourcesContent":["// // src/app/services/cart.service.ts\r\n\r\n// import { Injectable } from '@angular/core';\r\n// import { BehaviorSubject, Observable, of } from 'rxjs';\r\n// import { Product } from '../product/product.model';\r\n// import { HttpClient } from '@angular/common/http';\r\n// import { v4 as uuidv4 } from 'uuid'; // Import UUID library\r\n\r\n// @Injectable({\r\n//   providedIn: 'root'\r\n// })\r\n// export class CartService {\r\n//   private cartItems: Product[] = [];\r\n//   private cartCountSubject = new BehaviorSubject<number>(0);\r\n//   cartCount$ = this.cartCountSubject.asObservable();\r\n\r\n//   private cartApiUrl = 'http://localhost:5000/api/cart/post'; // Your Cart API endpoint\r\n//   private cartItemApiUrl = 'http://localhost:5000/api/cart/post'; // Your CartItem API endpoint\r\n\r\n//   constructor(private http: HttpClient) { }\r\n\r\n//   addToCart(product: Product): void {\r\n//     const existingProductIndex = this.cartItems.findIndex(item => item.productId === product.productId);\r\n//     if (existingProductIndex > -1) {\r\n//       this.cartItems[existingProductIndex].quantity += product.quantity || 1;\r\n//     } else {\r\n//       this.cartItems.push({ ...product, quantity: product.quantity || 1 });\r\n//     }\r\n//     this.updateCartCount();\r\n//   }\r\n\r\n//   private updateCartCount(): void {\r\n//     this.cartCountSubject.next(this.cartItems.length);\r\n//   }\r\n\r\n//   getCartItems(): Product[] {\r\n//     return this.cartItems;\r\n//   }\r\n\r\n//   getCartItemCount(): Observable<number> {\r\n//     return this.cartCount$;\r\n//   }\r\n\r\n//   removeFromCart(productId: number): void {\r\n//     this.cartItems = this.cartItems.filter(item => item.productId !== productId);\r\n//     this.updateCartCount();\r\n//   }\r\n\r\n//   clearCart(): void {\r\n//     this.cartItems = [];\r\n//     this.updateCartCount();\r\n//   }\r\n\r\n//   // Method to submit cart and cart items to the backend\r\n//   submitCart(): Observable<void> {\r\n//     const cartId = uuidv4(); // Generate a new UUID for the cart\r\n//     const cartItems = this.cartItems.map(item => ({\r\n//       productId: item.productId,\r\n//       quantity: item.quantity || 1,\r\n//       price: item.price,\r\n//       cartId:  { cartId }\r\n//     }));\r\n\r\n//     // Make HTTP requests to insert data\r\n//     return new Observable(observer => {\r\n//       this.http.post<void>(this.cartApiUrl, { cartId }).subscribe({\r\n//         next: () => {\r\n//           this.http.post<void>(this.cartItemApiUrl, cartItems).subscribe({\r\n//             next: () => {\r\n//               this.clearCart(); // Clear the cart after submission\r\n//               observer.next();\r\n//               observer.complete();\r\n//             },\r\n//             error: err => {\r\n//               console.error('Error submitting cart items:', err);\r\n//               observer.error(err);\r\n//             }\r\n//           });\r\n//         },\r\n//         error: err => {\r\n//           console.error('Error creating cart:', err);\r\n//           observer.error(err);\r\n//         }\r\n//       });\r\n//     });\r\n//   }\r\n// }\r\n// src/app/services/cart.service.ts\r\n//----------------------------------------------------------------\r\n// import { Injectable } from '@angular/core';\r\n// import { BehaviorSubject, Observable, of } from 'rxjs';\r\n// import { Product } from '../product/product.model';\r\n// import { HttpClient } from '@angular/common/http';\r\n// import { v4 as uuidv4 } from 'uuid'; // Import UUID library\r\n\r\n// @Injectable({\r\n//   providedIn: 'root'\r\n// })\r\n// export class CartService {\r\n//   private cartItems: Product[] = [];\r\n//   private cartCountSubject = new BehaviorSubject<number>(0);\r\n//   cartCount$ = this.cartCountSubject.asObservable();\r\n\r\n//   private apiUrl = 'http://localhost:5000/api/cart/post'; // Shared Cart and CartItem API endpoint\r\n\r\n//   constructor(private http: HttpClient) { }\r\n\r\n//   addToCart(product: Product): void {\r\n//     const existingProductIndex = this.cartItems.findIndex(item => item.productId === product.productId);\r\n//     if (existingProductIndex > -1) {\r\n//       this.cartItems[existingProductIndex].quantity += product.quantity || 1;\r\n//     } else {\r\n//       this.cartItems.push({ ...product, quantity: product.quantity || 1 });\r\n//     }\r\n//     this.updateCartCount();\r\n//   }\r\n\r\n//   private updateCartCount(): void {\r\n//     this.cartCountSubject.next(this.cartItems.length);\r\n//   }\r\n\r\n//   getCartItems(): Product[] {\r\n//     return this.cartItems;\r\n//   }\r\n\r\n//   getCartItemCount(): Observable<number> {\r\n//     return this.cartCount$;\r\n//   }\r\n\r\n//   removeFromCart(productId: number): void {\r\n//     this.cartItems = this.cartItems.filter(item => item.productId !== productId);\r\n//     this.updateCartCount();\r\n//   }\r\n\r\n//   clearCart(): void {\r\n//     this.cartItems = [];\r\n//     this.updateCartCount();\r\n//   }\r\n\r\n//   // Method to submit cart and cart items to the backend\r\n//   submitCart(): Observable<void> {\r\n//     const cartId = uuidv4(); // Generate a new UUID for the cart\r\n//     const cartItems = this.cartItems.map(item => ({\r\n//       productId: item.productId,\r\n//       quantity: item.quantity || 1,\r\n//       price: item.price,\r\n//       cartId: cartId // Use the generated cartId for each cart item\r\n//     }));\r\n\r\n//     // Construct the request payload for creating the cart\r\n//     const cartPayload = { cartId };\r\n\r\n//     // Construct the request payload for creating cart items\r\n//     const cartItemsPayload = { cartId, items: cartItems };\r\n\r\n//     // Make HTTP requests to insert data\r\n//     return new Observable(observer => {\r\n//       this.http.post<void>(this.apiUrl, cartPayload).subscribe({\r\n//         next: () => {\r\n//           this.http.post<void>(this.apiUrl, cartItemsPayload).subscribe({\r\n//             next: () => {\r\n//               this.clearCart(); // Clear the cart after submission\r\n//               observer.next();\r\n//               observer.complete();\r\n//             },\r\n//             error: err => {\r\n//               console.error('Error submitting cart items:', err);\r\n//               observer.error(err);\r\n//             }\r\n//           });\r\n//         },\r\n//         error: err => {\r\n//           console.error('Error creating cart:', err);\r\n//           observer.error(err);\r\n//         }\r\n//       });\r\n//     });\r\n//   }\r\n// }\r\n//-------------------------------------------------------------------------\r\nimport { Injectable } from '@angular/core';\r\nimport { BehaviorSubject, Observable, of } from 'rxjs';\r\nimport { Product } from '../product/product.model';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { v4 as uuidv4 } from 'uuid'; // Import UUID library\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class CartService {\r\n  private cartItems: Product[] = [];\r\n  private cartCountSubject = new BehaviorSubject<number>(0);\r\n  cartCount$ = this.cartCountSubject.asObservable();\r\n\r\n  private apiUrl = 'http://localhost:5000/api/cart/post'; // Shared Cart and CartItem API endpoint\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  addToCart(product: Product): void {\r\n    const existingProductIndex = this.cartItems.findIndex(item => item.productId === product.productId);\r\n    if (existingProductIndex > -1) {\r\n      this.cartItems[existingProductIndex].quantity += product.quantity || 1;\r\n    } else {\r\n      this.cartItems.push({ ...product, quantity: product.quantity || 1 });\r\n    }\r\n    this.updateCartCount();\r\n  }\r\n\r\n  private updateCartCount(): void {\r\n    this.cartCountSubject.next(this.cartItems.length);\r\n  }\r\n\r\n  getCartItems(): Product[] {\r\n    return this.cartItems;\r\n  }\r\n\r\n  getCartItemCount(): Observable<number> {\r\n    return this.cartCount$;\r\n  }\r\n\r\n  removeFromCart(productId: number): void {\r\n    this.cartItems = this.cartItems.filter(item => item.productId !== productId);\r\n    this.updateCartCount();\r\n  }\r\n\r\n  clearCart(): void {\r\n    this.cartItems = [];\r\n    this.updateCartCount();\r\n  }\r\n\r\n  // Method to submit cart and cart items to the backend\r\n  submitCart(): Observable<void> {\r\n    const cartId = uuidv4(); // Generate a new UUID for the cart\r\n    const todayDate = new Date().toISOString(); // Get today's date\r\n\r\n    // Map cart items to include createDate\r\n    const cartItems = this.cartItems.map(item => ({\r\n      createDate: todayDate, // Add createDate;\r\n      productId: item.productId,\r\n      quantity: item.quantity || 1,\r\n      price: item.price,\r\n      cartId: cartId // Use the generated cartId for each cart item\r\n      \r\n    }));\r\n\r\n    // Construct the request payload for creating the cart\r\n    const cartPayload = { cartId };\r\n\r\n    // Construct the request payload for creating cart items\r\n    const cartItemsPayload = { cartId, items: cartItems };\r\n    // Save cartId in localStorage\r\n  localStorage.setItem('currentCartId', cartId);\r\n\r\n    // Make HTTP requests to insert data\r\n    return new Observable(observer => {\r\n      this.http.post<void>(this.apiUrl, cartPayload).subscribe({\r\n        next: () => {\r\n          this.http.post<void>(this.apiUrl, cartItemsPayload).subscribe({\r\n            next: () => {\r\n              this.clearCart(); // Clear the cart after submission\r\n              observer.next();\r\n              observer.complete();\r\n            },\r\n            error: err => {\r\n              console.error('Error submitting cart items:', err);\r\n              observer.error(err);\r\n            }\r\n          });\r\n        },\r\n        error: err => {\r\n          console.error('Error creating cart:', err);\r\n          observer.error(err);\r\n        }\r\n      });\r\n    });\r\n  }\r\n   // Method to get cart items by cartId\r\n   getCartItemsByCartId(cartId: string): Observable<Product[]> {\r\n    return this.http.get<Product[]>(`http://localhost:5000/api/cart/{cartId}`);\r\n  }\r\n}\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}