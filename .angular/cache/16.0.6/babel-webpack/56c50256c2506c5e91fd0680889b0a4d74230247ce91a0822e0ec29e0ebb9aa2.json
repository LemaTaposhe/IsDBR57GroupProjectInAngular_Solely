{"ast":null,"code":"\"use strict\";\n\n// // src/app/services/cart.service.ts\n// import { Injectable } from '@angular/core';\n// import { BehaviorSubject, Observable, of } from 'rxjs';\n// import { Product } from '../product/product.model';\n// import { HttpClient } from '@angular/common/http';\n// import { v4 as uuidv4 } from 'uuid'; // Import UUID library\n// @Injectable({\n//   providedIn: 'root'\n// })\n// export class CartService {\n//   private cartItems: Product[] = [];\n//   private cartCountSubject = new BehaviorSubject<number>(0);\n//   cartCount$ = this.cartCountSubject.asObservable();\n//   private cartApiUrl = 'http://localhost:5000/api/cart/post'; // Your Cart API endpoint\n//   private cartItemApiUrl = 'http://localhost:5000/api/cart/post'; // Your CartItem API endpoint\n//   constructor(private http: HttpClient) { }\n//   addToCart(product: Product): void {\n//     const existingProductIndex = this.cartItems.findIndex(item => item.productId === product.productId);\n//     if (existingProductIndex > -1) {\n//       this.cartItems[existingProductIndex].quantity += product.quantity || 1;\n//     } else {\n//       this.cartItems.push({ ...product, quantity: product.quantity || 1 });\n//     }\n//     this.updateCartCount();\n//   }\n//   private updateCartCount(): void {\n//     this.cartCountSubject.next(this.cartItems.length);\n//   }\n//   getCartItems(): Product[] {\n//     return this.cartItems;\n//   }\n//   getCartItemCount(): Observable<number> {\n//     return this.cartCount$;\n//   }\n//   removeFromCart(productId: number): void {\n//     this.cartItems = this.cartItems.filter(item => item.productId !== productId);\n//     this.updateCartCount();\n//   }\n//   clearCart(): void {\n//     this.cartItems = [];\n//     this.updateCartCount();\n//   }\n//   // Method to submit cart and cart items to the backend\n//   submitCart(): Observable<void> {\n//     const cartId = uuidv4(); // Generate a new UUID for the cart\n//     const cartItems = this.cartItems.map(item => ({\n//       productId: item.productId,\n//       quantity: item.quantity || 1,\n//       price: item.price,\n//       cartId:  { cartId }\n//     }));\n//     // Make HTTP requests to insert data\n//     return new Observable(observer => {\n//       this.http.post<void>(this.cartApiUrl, { cartId }).subscribe({\n//         next: () => {\n//           this.http.post<void>(this.cartItemApiUrl, cartItems).subscribe({\n//             next: () => {\n//               this.clearCart(); // Clear the cart after submission\n//               observer.next();\n//               observer.complete();\n//             },\n//             error: err => {\n//               console.error('Error submitting cart items:', err);\n//               observer.error(err);\n//             }\n//           });\n//         },\n//         error: err => {\n//           console.error('Error creating cart:', err);\n//           observer.error(err);\n//         }\n//       });\n//     });\n//   }\n// }\n// src/app/services/cart.service.ts\n//----------------------------------------------------------------\n// import { Injectable } from '@angular/core';\n// import { BehaviorSubject, Observable, of } from 'rxjs';\n// import { Product } from '../product/product.model';\n// import { HttpClient } from '@angular/common/http';\n// import { v4 as uuidv4 } from 'uuid'; // Import UUID library\n// @Injectable({\n//   providedIn: 'root'\n// })\n// export class CartService {\n//   private cartItems: Product[] = [];\n//   private cartCountSubject = new BehaviorSubject<number>(0);\n//   cartCount$ = this.cartCountSubject.asObservable();\n//   private apiUrl = 'http://localhost:5000/api/cart/post'; // Shared Cart and CartItem API endpoint\n//   constructor(private http: HttpClient) { }\n//   addToCart(product: Product): void {\n//     const existingProductIndex = this.cartItems.findIndex(item => item.productId === product.productId);\n//     if (existingProductIndex > -1) {\n//       this.cartItems[existingProductIndex].quantity += product.quantity || 1;\n//     } else {\n//       this.cartItems.push({ ...product, quantity: product.quantity || 1 });\n//     }\n//     this.updateCartCount();\n//   }\n//   private updateCartCount(): void {\n//     this.cartCountSubject.next(this.cartItems.length);\n//   }\n//   getCartItems(): Product[] {\n//     return this.cartItems;\n//   }\n//   getCartItemCount(): Observable<number> {\n//     return this.cartCount$;\n//   }\n//   removeFromCart(productId: number): void {\n//     this.cartItems = this.cartItems.filter(item => item.productId !== productId);\n//     this.updateCartCount();\n//   }\n//   clearCart(): void {\n//     this.cartItems = [];\n//     this.updateCartCount();\n//   }\n//   // Method to submit cart and cart items to the backend\n//   submitCart(): Observable<void> {\n//     const cartId = uuidv4(); // Generate a new UUID for the cart\n//     const cartItems = this.cartItems.map(item => ({\n//       productId: item.productId,\n//       quantity: item.quantity || 1,\n//       price: item.price,\n//       cartId: cartId // Use the generated cartId for each cart item\n//     }));\n//     // Construct the request payload for creating the cart\n//     const cartPayload = { cartId };\n//     // Construct the request payload for creating cart items\n//     const cartItemsPayload = { cartId, items: cartItems };\n//     // Make HTTP requests to insert data\n//     return new Observable(observer => {\n//       this.http.post<void>(this.apiUrl, cartPayload).subscribe({\n//         next: () => {\n//           this.http.post<void>(this.apiUrl, cartItemsPayload).subscribe({\n//             next: () => {\n//               this.clearCart(); // Clear the cart after submission\n//               observer.next();\n//               observer.complete();\n//             },\n//             error: err => {\n//               console.error('Error submitting cart items:', err);\n//               observer.error(err);\n//             }\n//           });\n//         },\n//         error: err => {\n//           console.error('Error creating cart:', err);\n//           observer.error(err);\n//         }\n//       });\n//     });\n//   }\n// }\n//-------------------------------------------------------------------------","map":{"version":3,"names":[],"sources":["G:\\IsDB- Bisew Class-1\\UI-18-08-24\\UI-Font-01\\src\\app\\cart\\cart.service.ts"],"sourcesContent":["// // src/app/services/cart.service.ts\r\n\r\n// import { Injectable } from '@angular/core';\r\n// import { BehaviorSubject, Observable, of } from 'rxjs';\r\n// import { Product } from '../product/product.model';\r\n// import { HttpClient } from '@angular/common/http';\r\n// import { v4 as uuidv4 } from 'uuid'; // Import UUID library\r\n\r\n// @Injectable({\r\n//   providedIn: 'root'\r\n// })\r\n// export class CartService {\r\n//   private cartItems: Product[] = [];\r\n//   private cartCountSubject = new BehaviorSubject<number>(0);\r\n//   cartCount$ = this.cartCountSubject.asObservable();\r\n\r\n//   private cartApiUrl = 'http://localhost:5000/api/cart/post'; // Your Cart API endpoint\r\n//   private cartItemApiUrl = 'http://localhost:5000/api/cart/post'; // Your CartItem API endpoint\r\n\r\n//   constructor(private http: HttpClient) { }\r\n\r\n//   addToCart(product: Product): void {\r\n//     const existingProductIndex = this.cartItems.findIndex(item => item.productId === product.productId);\r\n//     if (existingProductIndex > -1) {\r\n//       this.cartItems[existingProductIndex].quantity += product.quantity || 1;\r\n//     } else {\r\n//       this.cartItems.push({ ...product, quantity: product.quantity || 1 });\r\n//     }\r\n//     this.updateCartCount();\r\n//   }\r\n\r\n//   private updateCartCount(): void {\r\n//     this.cartCountSubject.next(this.cartItems.length);\r\n//   }\r\n\r\n//   getCartItems(): Product[] {\r\n//     return this.cartItems;\r\n//   }\r\n\r\n//   getCartItemCount(): Observable<number> {\r\n//     return this.cartCount$;\r\n//   }\r\n\r\n//   removeFromCart(productId: number): void {\r\n//     this.cartItems = this.cartItems.filter(item => item.productId !== productId);\r\n//     this.updateCartCount();\r\n//   }\r\n\r\n//   clearCart(): void {\r\n//     this.cartItems = [];\r\n//     this.updateCartCount();\r\n//   }\r\n\r\n//   // Method to submit cart and cart items to the backend\r\n//   submitCart(): Observable<void> {\r\n//     const cartId = uuidv4(); // Generate a new UUID for the cart\r\n//     const cartItems = this.cartItems.map(item => ({\r\n//       productId: item.productId,\r\n//       quantity: item.quantity || 1,\r\n//       price: item.price,\r\n//       cartId:  { cartId }\r\n//     }));\r\n\r\n//     // Make HTTP requests to insert data\r\n//     return new Observable(observer => {\r\n//       this.http.post<void>(this.cartApiUrl, { cartId }).subscribe({\r\n//         next: () => {\r\n//           this.http.post<void>(this.cartItemApiUrl, cartItems).subscribe({\r\n//             next: () => {\r\n//               this.clearCart(); // Clear the cart after submission\r\n//               observer.next();\r\n//               observer.complete();\r\n//             },\r\n//             error: err => {\r\n//               console.error('Error submitting cart items:', err);\r\n//               observer.error(err);\r\n//             }\r\n//           });\r\n//         },\r\n//         error: err => {\r\n//           console.error('Error creating cart:', err);\r\n//           observer.error(err);\r\n//         }\r\n//       });\r\n//     });\r\n//   }\r\n// }\r\n// src/app/services/cart.service.ts\r\n//----------------------------------------------------------------\r\n// import { Injectable } from '@angular/core';\r\n// import { BehaviorSubject, Observable, of } from 'rxjs';\r\n// import { Product } from '../product/product.model';\r\n// import { HttpClient } from '@angular/common/http';\r\n// import { v4 as uuidv4 } from 'uuid'; // Import UUID library\r\n\r\n// @Injectable({\r\n//   providedIn: 'root'\r\n// })\r\n// export class CartService {\r\n//   private cartItems: Product[] = [];\r\n//   private cartCountSubject = new BehaviorSubject<number>(0);\r\n//   cartCount$ = this.cartCountSubject.asObservable();\r\n\r\n//   private apiUrl = 'http://localhost:5000/api/cart/post'; // Shared Cart and CartItem API endpoint\r\n\r\n//   constructor(private http: HttpClient) { }\r\n\r\n//   addToCart(product: Product): void {\r\n//     const existingProductIndex = this.cartItems.findIndex(item => item.productId === product.productId);\r\n//     if (existingProductIndex > -1) {\r\n//       this.cartItems[existingProductIndex].quantity += product.quantity || 1;\r\n//     } else {\r\n//       this.cartItems.push({ ...product, quantity: product.quantity || 1 });\r\n//     }\r\n//     this.updateCartCount();\r\n//   }\r\n\r\n//   private updateCartCount(): void {\r\n//     this.cartCountSubject.next(this.cartItems.length);\r\n//   }\r\n\r\n//   getCartItems(): Product[] {\r\n//     return this.cartItems;\r\n//   }\r\n\r\n//   getCartItemCount(): Observable<number> {\r\n//     return this.cartCount$;\r\n//   }\r\n\r\n//   removeFromCart(productId: number): void {\r\n//     this.cartItems = this.cartItems.filter(item => item.productId !== productId);\r\n//     this.updateCartCount();\r\n//   }\r\n\r\n//   clearCart(): void {\r\n//     this.cartItems = [];\r\n//     this.updateCartCount();\r\n//   }\r\n\r\n//   // Method to submit cart and cart items to the backend\r\n//   submitCart(): Observable<void> {\r\n//     const cartId = uuidv4(); // Generate a new UUID for the cart\r\n//     const cartItems = this.cartItems.map(item => ({\r\n//       productId: item.productId,\r\n//       quantity: item.quantity || 1,\r\n//       price: item.price,\r\n//       cartId: cartId // Use the generated cartId for each cart item\r\n//     }));\r\n\r\n//     // Construct the request payload for creating the cart\r\n//     const cartPayload = { cartId };\r\n\r\n//     // Construct the request payload for creating cart items\r\n//     const cartItemsPayload = { cartId, items: cartItems };\r\n\r\n//     // Make HTTP requests to insert data\r\n//     return new Observable(observer => {\r\n//       this.http.post<void>(this.apiUrl, cartPayload).subscribe({\r\n//         next: () => {\r\n//           this.http.post<void>(this.apiUrl, cartItemsPayload).subscribe({\r\n//             next: () => {\r\n//               this.clearCart(); // Clear the cart after submission\r\n//               observer.next();\r\n//               observer.complete();\r\n//             },\r\n//             error: err => {\r\n//               console.error('Error submitting cart items:', err);\r\n//               observer.error(err);\r\n//             }\r\n//           });\r\n//         },\r\n//         error: err => {\r\n//           console.error('Error creating cart:', err);\r\n//           observer.error(err);\r\n//         }\r\n//       });\r\n//     });\r\n//   }\r\n// }\r\n//-------------------------------------------------------------------------"],"mappingsignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}