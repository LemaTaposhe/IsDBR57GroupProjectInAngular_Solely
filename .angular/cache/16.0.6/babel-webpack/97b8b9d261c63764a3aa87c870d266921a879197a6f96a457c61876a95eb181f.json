{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class DistrictService {\n  constructor(_http) {\n    this._http = _http;\n    this.url = environment.apiBaseUrl;\n  }\n  getAllDistricts() {\n    return this._http.get(`${this.url}/District/GetAllDistricts`);\n  }\n  getDistrictById(id) {\n    return this._http.get(`${this.url}/District/GetDistrict/${id}`);\n  }\n  deleteDistrictById(id) {\n    const httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json'\n      })\n    };\n    return this._http.delete(`${this.url}/District/DeleteDistrict/${id}`, httpOptions);\n  }\n  createDistrict(district) {\n    const httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json'\n      })\n    };\n    return this._http.post(`${this.url}/District/SaveDistrict`, district, httpOptions);\n  }\n  updateDistrict(id, district) {\n    const httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json'\n      })\n    };\n    return this._http.put(`${this.url}/District/UpdateDistrict/${id}`, district, httpOptions);\n  }\n  // New method to check for duplicates\n  checkDuplicateDistrict(name, divisionId) {\n    return this._http.get(`${this.url}/District/CheckDuplicate/${name}/${divisionId}`);\n  }\n  static #_ = this.ɵfac = function DistrictService_Factory(t) {\n    return new (t || DistrictService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: DistrictService,\n    factory: DistrictService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["HttpHeaders","environment","DistrictService","constructor","_http","url","apiBaseUrl","getAllDistricts","get","getDistrictById","id","deleteDistrictById","httpOptions","headers","delete","createDistrict","district","post","updateDistrict","put","checkDuplicateDistrict","name","divisionId","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["G:\\IsDB- Bisew Class-1\\UI-18-08-24\\UI-Font-01\\src\\app\\district\\district.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { environment } from 'src/environments/environment';\r\nimport { District } from './district.model';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class DistrictService {\r\n  private url: string = environment.apiBaseUrl;\r\n\r\n  constructor(private _http: HttpClient) { }\r\n\r\n  getAllDistricts(): Observable<District[]> {\r\n    return this._http.get<District[]>(`${this.url}/District/GetAllDistricts`);\r\n  }\r\n\r\n  getDistrictById(id: number): Observable<District> {\r\n    return this._http.get<District>(`${this.url}/District/GetDistrict/${id}`);\r\n  }\r\n\r\n  deleteDistrictById(id: number): Observable<void> {\r\n    const httpOptions = { headers: new HttpHeaders({ 'Content-Type': 'application/json' }) };\r\n    return this._http.delete<void>(`${this.url}/District/DeleteDistrict/${id}`, httpOptions);\r\n  }\r\n\r\n  createDistrict(district: District): Observable<District> {\r\n    const httpOptions = { headers: new HttpHeaders({ 'Content-Type': 'application/json' }) };\r\n    return this._http.post<District>(`${this.url}/District/SaveDistrict`, district, httpOptions);\r\n  }\r\n\r\n  updateDistrict(id: number, district: District): Observable<District> {\r\n    const httpOptions = { headers: new HttpHeaders({ 'Content-Type': 'application/json' }) };\r\n    return this._http.put<District>(`${this.url}/District/UpdateDistrict/${id}`, district, httpOptions);\r\n  }\r\n  // New method to check for duplicates\r\n  checkDuplicateDistrict(name: string, divisionId: number): Observable<boolean> {\r\n    return this._http.get<boolean>(`${this.url}/District/CheckDuplicate/${name}/${divisionId}`);\r\n  }\r\n}\r\n"],"mappings":"AACA,SAAqBA,WAAW,QAAQ,sBAAsB;AAE9D,SAASC,WAAW,QAAQ,8BAA8B;;;AAM1D,OAAM,MAAOC,eAAe;EAG1BC,YAAoBC,KAAiB;IAAjB,KAAAA,KAAK,GAALA,KAAK;IAFjB,KAAAC,GAAG,GAAWJ,WAAW,CAACK,UAAU;EAEH;EAEzCC,eAAeA,CAAA;IACb,OAAO,IAAI,CAACH,KAAK,CAACI,GAAG,CAAa,GAAG,IAAI,CAACH,GAAG,2BAA2B,CAAC;EAC3E;EAEAI,eAAeA,CAACC,EAAU;IACxB,OAAO,IAAI,CAACN,KAAK,CAACI,GAAG,CAAW,GAAG,IAAI,CAACH,GAAG,yBAAyBK,EAAE,EAAE,CAAC;EAC3E;EAEAC,kBAAkBA,CAACD,EAAU;IAC3B,MAAME,WAAW,GAAG;MAAEC,OAAO,EAAE,IAAIb,WAAW,CAAC;QAAE,cAAc,EAAE;MAAkB,CAAE;IAAC,CAAE;IACxF,OAAO,IAAI,CAACI,KAAK,CAACU,MAAM,CAAO,GAAG,IAAI,CAACT,GAAG,4BAA4BK,EAAE,EAAE,EAAEE,WAAW,CAAC;EAC1F;EAEAG,cAAcA,CAACC,QAAkB;IAC/B,MAAMJ,WAAW,GAAG;MAAEC,OAAO,EAAE,IAAIb,WAAW,CAAC;QAAE,cAAc,EAAE;MAAkB,CAAE;IAAC,CAAE;IACxF,OAAO,IAAI,CAACI,KAAK,CAACa,IAAI,CAAW,GAAG,IAAI,CAACZ,GAAG,wBAAwB,EAAEW,QAAQ,EAAEJ,WAAW,CAAC;EAC9F;EAEAM,cAAcA,CAACR,EAAU,EAAEM,QAAkB;IAC3C,MAAMJ,WAAW,GAAG;MAAEC,OAAO,EAAE,IAAIb,WAAW,CAAC;QAAE,cAAc,EAAE;MAAkB,CAAE;IAAC,CAAE;IACxF,OAAO,IAAI,CAACI,KAAK,CAACe,GAAG,CAAW,GAAG,IAAI,CAACd,GAAG,4BAA4BK,EAAE,EAAE,EAAEM,QAAQ,EAAEJ,WAAW,CAAC;EACrG;EACA;EACAQ,sBAAsBA,CAACC,IAAY,EAAEC,UAAkB;IACrD,OAAO,IAAI,CAAClB,KAAK,CAACI,GAAG,CAAU,GAAG,IAAI,CAACH,GAAG,4BAA4BgB,IAAI,IAAIC,UAAU,EAAE,CAAC;EAC7F;EAAC,QAAAC,CAAA,G;qBA9BUrB,eAAe,EAAAsB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAf1B,eAAe;IAAA2B,OAAA,EAAf3B,eAAe,CAAA4B,IAAA;IAAAC,UAAA,EAFd;EAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}