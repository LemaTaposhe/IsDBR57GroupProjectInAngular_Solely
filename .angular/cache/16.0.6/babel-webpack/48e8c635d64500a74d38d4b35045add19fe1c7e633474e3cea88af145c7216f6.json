{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { environment } from 'src/environments/environment.development';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class BrandService {\n  /*  opts = [];*/\n  constructor(_http) {\n    this._http = _http;\n    this.url = environment.apiBaseUrl;\n  }\n  //getData() {\n  //  return this.opts.length ?\n  //    of(this.opts) :\n  //    this._http.get<any>(this.url).pipe(tap(data => this.opts = data));\n  //}\n  getAllBrand() {\n    return this._http.get(this.url + '/Brand/');\n  }\n  getBrandById(id) {\n    return this._http.get(this.url + '/Brand/' + id);\n  }\n  createBrand(brand) {\n    const httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json'\n      })\n    };\n    return this._http.post(this.url + '/Brand/', brand, httpOptions);\n  }\n  updateBrand(id, brand) {\n    const httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json'\n      })\n    };\n    return this._http.put(this.url + '/Brand/' + id, brand, httpOptions);\n  }\n  deleteBrandById(id) {\n    const httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json'\n      })\n    };\n    return this._http.delete(this.url + '/Brand/' + id, httpOptions);\n  }\n  static #_ = this.ɵfac = function BrandService_Factory(t) {\n    return new (t || BrandService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: BrandService,\n    factory: BrandService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["HttpHeaders","environment","BrandService","constructor","_http","url","apiBaseUrl","getAllBrand","get","getBrandById","id","createBrand","brand","httpOptions","headers","post","updateBrand","put","deleteBrandById","delete","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["G:\\IsDB- Bisew Class-1\\UI-18-08-24\\UI-Font-01\\src\\app\\brand\\brand.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Observable, of} from 'rxjs';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Brand } from './brand.model';\r\nimport { RootComponent } from '../root/root.component';\r\nimport { environment } from 'src/environments/environment.development';\r\nimport { tap } from \"rxjs/operators\"\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class BrandService {\r\n\r\n  url: string = environment.apiBaseUrl\r\n/*  opts = [];*/\r\n  constructor(private _http: HttpClient) { }\r\n\r\n  //getData() {\r\n  //  return this.opts.length ?\r\n  //    of(this.opts) :\r\n  //    this._http.get<any>(this.url).pipe(tap(data => this.opts = data));\r\n  //}\r\n\r\n  getAllBrand(): Observable<Brand[]> {\r\n    return this._http.get<Brand[]>(this.url + '/Brand/');\r\n  }\r\n\r\n  getBrandById(id: any): Observable<any> {\r\n    return this._http.get<Brand[]>(this.url + '/Brand/' + id);\r\n  }\r\n\r\n  createBrand(brand: Brand): Observable<Brand> {\r\n    const httpOptions = { headers: new HttpHeaders({ 'Content-Type': 'application/json' }) };\r\n    return this._http.post<Brand>(this.url + '/Brand/', brand, httpOptions);\r\n  }\r\n\r\n  updateBrand(id: any, brand: Brand): Observable<Brand> {\r\n    const httpOptions = { headers: new HttpHeaders({ 'Content-Type': 'application/json' }) };\r\n    return this._http.put<Brand>(this.url + '/Brand/' + id, brand, httpOptions);\r\n  }\r\n\r\n  deleteBrandById(id: string): Observable<number> {\r\n    const httpOptions = { headers: new HttpHeaders({ 'Content-Type': 'application/json' }) };\r\n    return this._http.delete<number>(this.url + '/Brand/' + id, httpOptions);\r\n  }\r\n}\r\n"],"mappings":"AAEA,SAAqBA,WAAW,QAAQ,sBAAsB;AAG9D,SAASC,WAAW,QAAQ,0CAA0C;;;AAMtE,OAAM,MAAOC,YAAY;EAGzB;EACEC,YAAoBC,KAAiB;IAAjB,KAAAA,KAAK,GAALA,KAAK;IAFzB,KAAAC,GAAG,GAAWJ,WAAW,CAACK,UAAU;EAEK;EAEzC;EACA;EACA;EACA;EACA;EAEAC,WAAWA,CAAA;IACT,OAAO,IAAI,CAACH,KAAK,CAACI,GAAG,CAAU,IAAI,CAACH,GAAG,GAAG,SAAS,CAAC;EACtD;EAEAI,YAAYA,CAACC,EAAO;IAClB,OAAO,IAAI,CAACN,KAAK,CAACI,GAAG,CAAU,IAAI,CAACH,GAAG,GAAG,SAAS,GAAGK,EAAE,CAAC;EAC3D;EAEAC,WAAWA,CAACC,KAAY;IACtB,MAAMC,WAAW,GAAG;MAAEC,OAAO,EAAE,IAAId,WAAW,CAAC;QAAE,cAAc,EAAE;MAAkB,CAAE;IAAC,CAAE;IACxF,OAAO,IAAI,CAACI,KAAK,CAACW,IAAI,CAAQ,IAAI,CAACV,GAAG,GAAG,SAAS,EAAEO,KAAK,EAAEC,WAAW,CAAC;EACzE;EAEAG,WAAWA,CAACN,EAAO,EAAEE,KAAY;IAC/B,MAAMC,WAAW,GAAG;MAAEC,OAAO,EAAE,IAAId,WAAW,CAAC;QAAE,cAAc,EAAE;MAAkB,CAAE;IAAC,CAAE;IACxF,OAAO,IAAI,CAACI,KAAK,CAACa,GAAG,CAAQ,IAAI,CAACZ,GAAG,GAAG,SAAS,GAAGK,EAAE,EAAEE,KAAK,EAAEC,WAAW,CAAC;EAC7E;EAEAK,eAAeA,CAACR,EAAU;IACxB,MAAMG,WAAW,GAAG;MAAEC,OAAO,EAAE,IAAId,WAAW,CAAC;QAAE,cAAc,EAAE;MAAkB,CAAE;IAAC,CAAE;IACxF,OAAO,IAAI,CAACI,KAAK,CAACe,MAAM,CAAS,IAAI,CAACd,GAAG,GAAG,SAAS,GAAGK,EAAE,EAAEG,WAAW,CAAC;EAC1E;EAAC,QAAAO,CAAA,G;qBAjCUlB,YAAY,EAAAmB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAZvB,YAAY;IAAAwB,OAAA,EAAZxB,YAAY,CAAAyB,IAAA;IAAAC,UAAA,EAFX;EAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}