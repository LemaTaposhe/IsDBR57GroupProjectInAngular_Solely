{"ast":null,"code":"import { BehaviorSubject, Observable } from 'rxjs';\nimport { v4 as uuidv4 } from 'uuid'; // Import UUID library\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class CartService {\n  constructor(http) {\n    this.http = http;\n    this.cartCountSubject = new BehaviorSubject(0);\n    this.cartCount$ = this.cartCountSubject.asObservable();\n    this.apiUrl = 'http://localhost:5000/api/cart'; // Adjust API endpoint as necessary\n    this.initializeCart();\n  }\n  initializeCart() {\n    const storedCartItems = localStorage.getItem('cartItems');\n    if (storedCartItems) {\n      const items = JSON.parse(storedCartItems);\n      this.updateCartCount(items.length);\n    }\n  }\n  addToCart(product) {\n    let cartItems = this.getStoredCartItems();\n    const existingProductIndex = cartItems.findIndex(item => item.productId === product.productId);\n    if (existingProductIndex > -1) {\n      cartItems[existingProductIndex].quantity += product.quantity || 1;\n    } else {\n      cartItems.push({\n        ...product,\n        quantity: product.quantity || 1\n      });\n    }\n    this.storeCartItems(cartItems);\n    this.updateCartCount(cartItems.length);\n  }\n  updateCartCount(count) {\n    this.cartCountSubject.next(count);\n  }\n  getCartItems() {\n    return this.getStoredCartItems();\n  }\n  getCartItemCount() {\n    return this.cartCount$;\n  }\n  removeFromCart(productId) {\n    let cartItems = this.getStoredCartItems();\n    cartItems = cartItems.filter(item => item.productId !== productId);\n    this.storeCartItems(cartItems);\n    this.updateCartCount(cartItems.length);\n  }\n  clearCart() {\n    localStorage.removeItem('cartItems');\n    this.updateCartCount(0);\n  }\n  getStoredCartItems() {\n    const storedItems = localStorage.getItem('cartItems');\n    return storedItems ? JSON.parse(storedItems) : [];\n  }\n  storeCartItems(cartItems) {\n    localStorage.setItem('cartItems', JSON.stringify(cartItems));\n  }\n  submitCart() {\n    const cartId = uuidv4(); // Generate a new UUID for the cart\n    const todayDate = new Date().toISOString(); // Get today's date\n    const cartItems = this.getStoredCartItems().map(item => ({\n      createDate: todayDate,\n      productId: item.productId,\n      quantity: item.quantity || 1,\n      price: item.price,\n      cartId: cartId // Use the generated cartId for each cart item\n    }));\n    const cartPayload = {\n      cartId\n    };\n    const cartItemsPayload = {\n      cartId,\n      items: cartItems\n    };\n    localStorage.setItem('currentCartId', cartId);\n    return new Observable(observer => {\n      this.http.post(`${this.apiUrl}/create`, cartPayload).subscribe({\n        next: () => {\n          this.http.post(`${this.apiUrl}/items`, cartItemsPayload).subscribe({\n            next: () => {\n              this.clearCart(); // Clear the cart after submission\n              observer.next();\n              observer.complete();\n            },\n            error: err => {\n              console.error('Error submitting cart items:', err);\n              observer.error(err);\n            }\n          });\n        },\n        error: err => {\n          console.error('Error creating cart:', err);\n          observer.error(err);\n        }\n      });\n    });\n  }\n  getCartItemsByCartId(cartId) {\n    return this.http.get(`${this.apiUrl}/items/${cartId}`);\n  }\n  static #_ = this.ɵfac = function CartService_Factory(t) {\n    return new (t || CartService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: CartService,\n    factory: CartService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["BehaviorSubject","Observable","v4","uuidv4","CartService","constructor","http","cartCountSubject","cartCount$","asObservable","apiUrl","initializeCart","storedCartItems","localStorage","getItem","items","JSON","parse","updateCartCount","length","addToCart","product","cartItems","getStoredCartItems","existingProductIndex","findIndex","item","productId","quantity","push","storeCartItems","count","next","getCartItems","getCartItemCount","removeFromCart","filter","clearCart","removeItem","storedItems","setItem","stringify","submitCart","cartId","todayDate","Date","toISOString","map","createDate","price","cartPayload","cartItemsPayload","observer","post","subscribe","complete","error","err","console","getCartItemsByCartId","get","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["G:\\IsDB- Bisew Class-1\\UI-18-08-24\\UI-Font-01\\src\\app\\cart\\cart.service.ts"],"sourcesContent":["// // src/app/services/cart.service.ts\r\n\r\n// import { Injectable } from '@angular/core';\r\n// import { BehaviorSubject, Observable, of } from 'rxjs';\r\n// import { Product } from '../product/product.model';\r\n// import { HttpClient } from '@angular/common/http';\r\n// import { v4 as uuidv4 } from 'uuid'; // Import UUID library\r\n\r\n// @Injectable({\r\n//   providedIn: 'root'\r\n// })\r\n// export class CartService {\r\n//   private cartItems: Product[] = [];\r\n//   private cartCountSubject = new BehaviorSubject<number>(0);\r\n//   cartCount$ = this.cartCountSubject.asObservable();\r\n\r\n//   private cartApiUrl = 'http://localhost:5000/api/cart/post'; // Your Cart API endpoint\r\n//   private cartItemApiUrl = 'http://localhost:5000/api/cart/post'; // Your CartItem API endpoint\r\n\r\n//   constructor(private http: HttpClient) { }\r\n\r\n//   addToCart(product: Product): void {\r\n//     const existingProductIndex = this.cartItems.findIndex(item => item.productId === product.productId);\r\n//     if (existingProductIndex > -1) {\r\n//       this.cartItems[existingProductIndex].quantity += product.quantity || 1;\r\n//     } else {\r\n//       this.cartItems.push({ ...product, quantity: product.quantity || 1 });\r\n//     }\r\n//     this.updateCartCount();\r\n//   }\r\n\r\n//   private updateCartCount(): void {\r\n//     this.cartCountSubject.next(this.cartItems.length);\r\n//   }\r\n\r\n//   getCartItems(): Product[] {\r\n//     return this.cartItems;\r\n//   }\r\n\r\n//   getCartItemCount(): Observable<number> {\r\n//     return this.cartCount$;\r\n//   }\r\n\r\n//   removeFromCart(productId: number): void {\r\n//     this.cartItems = this.cartItems.filter(item => item.productId !== productId);\r\n//     this.updateCartCount();\r\n//   }\r\n\r\n//   clearCart(): void {\r\n//     this.cartItems = [];\r\n//     this.updateCartCount();\r\n//   }\r\n\r\n//   // Method to submit cart and cart items to the backend\r\n//   submitCart(): Observable<void> {\r\n//     const cartId = uuidv4(); // Generate a new UUID for the cart\r\n//     const cartItems = this.cartItems.map(item => ({\r\n//       productId: item.productId,\r\n//       quantity: item.quantity || 1,\r\n//       price: item.price,\r\n//       cartId:  { cartId }\r\n//     }));\r\n\r\n//     // Make HTTP requests to insert data\r\n//     return new Observable(observer => {\r\n//       this.http.post<void>(this.cartApiUrl, { cartId }).subscribe({\r\n//         next: () => {\r\n//           this.http.post<void>(this.cartItemApiUrl, cartItems).subscribe({\r\n//             next: () => {\r\n//               this.clearCart(); // Clear the cart after submission\r\n//               observer.next();\r\n//               observer.complete();\r\n//             },\r\n//             error: err => {\r\n//               console.error('Error submitting cart items:', err);\r\n//               observer.error(err);\r\n//             }\r\n//           });\r\n//         },\r\n//         error: err => {\r\n//           console.error('Error creating cart:', err);\r\n//           observer.error(err);\r\n//         }\r\n//       });\r\n//     });\r\n//   }\r\n// }\r\n// src/app/services/cart.service.ts\r\n//----------------------------------------------------------------\r\n// import { Injectable } from '@angular/core';\r\n// import { BehaviorSubject, Observable, of } from 'rxjs';\r\n// import { Product } from '../product/product.model';\r\n// import { HttpClient } from '@angular/common/http';\r\n// import { v4 as uuidv4 } from 'uuid'; // Import UUID library\r\n\r\n// @Injectable({\r\n//   providedIn: 'root'\r\n// })\r\n// export class CartService {\r\n//   private cartItems: Product[] = [];\r\n//   private cartCountSubject = new BehaviorSubject<number>(0);\r\n//   cartCount$ = this.cartCountSubject.asObservable();\r\n\r\n//   private apiUrl = 'http://localhost:5000/api/cart/post'; // Shared Cart and CartItem API endpoint\r\n\r\n//   constructor(private http: HttpClient) { }\r\n\r\n//   addToCart(product: Product): void {\r\n//     const existingProductIndex = this.cartItems.findIndex(item => item.productId === product.productId);\r\n//     if (existingProductIndex > -1) {\r\n//       this.cartItems[existingProductIndex].quantity += product.quantity || 1;\r\n//     } else {\r\n//       this.cartItems.push({ ...product, quantity: product.quantity || 1 });\r\n//     }\r\n//     this.updateCartCount();\r\n//   }\r\n\r\n//   private updateCartCount(): void {\r\n//     this.cartCountSubject.next(this.cartItems.length);\r\n//   }\r\n\r\n//   getCartItems(): Product[] {\r\n//     return this.cartItems;\r\n//   }\r\n\r\n//   getCartItemCount(): Observable<number> {\r\n//     return this.cartCount$;\r\n//   }\r\n\r\n//   removeFromCart(productId: number): void {\r\n//     this.cartItems = this.cartItems.filter(item => item.productId !== productId);\r\n//     this.updateCartCount();\r\n//   }\r\n\r\n//   clearCart(): void {\r\n//     this.cartItems = [];\r\n//     this.updateCartCount();\r\n//   }\r\n\r\n//   // Method to submit cart and cart items to the backend\r\n//   submitCart(): Observable<void> {\r\n//     const cartId = uuidv4(); // Generate a new UUID for the cart\r\n//     const cartItems = this.cartItems.map(item => ({\r\n//       productId: item.productId,\r\n//       quantity: item.quantity || 1,\r\n//       price: item.price,\r\n//       cartId: cartId // Use the generated cartId for each cart item\r\n//     }));\r\n\r\n//     // Construct the request payload for creating the cart\r\n//     const cartPayload = { cartId };\r\n\r\n//     // Construct the request payload for creating cart items\r\n//     const cartItemsPayload = { cartId, items: cartItems };\r\n\r\n//     // Make HTTP requests to insert data\r\n//     return new Observable(observer => {\r\n//       this.http.post<void>(this.apiUrl, cartPayload).subscribe({\r\n//         next: () => {\r\n//           this.http.post<void>(this.apiUrl, cartItemsPayload).subscribe({\r\n//             next: () => {\r\n//               this.clearCart(); // Clear the cart after submission\r\n//               observer.next();\r\n//               observer.complete();\r\n//             },\r\n//             error: err => {\r\n//               console.error('Error submitting cart items:', err);\r\n//               observer.error(err);\r\n//             }\r\n//           });\r\n//         },\r\n//         error: err => {\r\n//           console.error('Error creating cart:', err);\r\n//           observer.error(err);\r\n//         }\r\n//       });\r\n//     });\r\n//   }\r\n// }\r\n//-------------------------------------------------------------------------\r\nimport { Injectable } from '@angular/core';\r\nimport { BehaviorSubject, Observable, of } from 'rxjs';\r\nimport { Product } from '../product/product.model';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { v4 as uuidv4 } from 'uuid'; // Import UUID library\r\n@Injectable({\r\n    providedIn: 'root'\r\n  })\r\n  export class CartService {\r\n    private cartCountSubject = new BehaviorSubject<number>(0);\r\n    cartCount$ = this.cartCountSubject.asObservable();\r\n  \r\n    private apiUrl = 'http://localhost:5000/api/cart'; // Adjust API endpoint as necessary\r\n  \r\n    constructor(private http: HttpClient) {\r\n      this.initializeCart();\r\n    }\r\n  \r\n    private initializeCart(): void {\r\n      const storedCartItems = localStorage.getItem('cartItems');\r\n      if (storedCartItems) {\r\n        const items: Product[] = JSON.parse(storedCartItems);\r\n        this.updateCartCount(items.length);\r\n      }\r\n    }\r\n  \r\n    addToCart(product: Product): void {\r\n      let cartItems = this.getStoredCartItems();\r\n      const existingProductIndex = cartItems.findIndex(item => item.productId === product.productId);\r\n      if (existingProductIndex > -1) {\r\n        cartItems[existingProductIndex].quantity += product.quantity || 1;\r\n      } else {\r\n        cartItems.push({ ...product, quantity: product.quantity || 1 });\r\n      }\r\n      this.storeCartItems(cartItems);\r\n      this.updateCartCount(cartItems.length);\r\n    }\r\n  \r\n    private updateCartCount(count: number): void {\r\n      this.cartCountSubject.next(count);\r\n    }\r\n  \r\n    getCartItems(): Product[] {\r\n      return this.getStoredCartItems();\r\n    }\r\n  \r\n    getCartItemCount(): Observable<number> {\r\n      return this.cartCount$;\r\n    }\r\n  \r\n    removeFromCart(productId: number): void {\r\n      let cartItems = this.getStoredCartItems();\r\n      cartItems = cartItems.filter(item => item.productId !== productId);\r\n      this.storeCartItems(cartItems);\r\n      this.updateCartCount(cartItems.length);\r\n    }\r\n  \r\n    clearCart(): void {\r\n      localStorage.removeItem('cartItems');\r\n      this.updateCartCount(0);\r\n    }\r\n  \r\n    private getStoredCartItems(): Product[] {\r\n      const storedItems = localStorage.getItem('cartItems');\r\n      return storedItems ? JSON.parse(storedItems) : [];\r\n    }\r\n  \r\n    private storeCartItems(cartItems: Product[]): void {\r\n      localStorage.setItem('cartItems', JSON.stringify(cartItems));\r\n    }\r\n  \r\n    submitCart(): Observable<void> {\r\n      const cartId = uuidv4(); // Generate a new UUID for the cart\r\n      const todayDate = new Date().toISOString(); // Get today's date\r\n  \r\n      const cartItems = this.getStoredCartItems().map(item => ({\r\n        createDate: todayDate, // Add createDate\r\n        productId: item.productId,\r\n        quantity: item.quantity || 1,\r\n        price: item.price,\r\n        cartId: cartId // Use the generated cartId for each cart item\r\n      }));\r\n  \r\n      const cartPayload = { cartId };\r\n      const cartItemsPayload = { cartId, items: cartItems };\r\n  \r\n      localStorage.setItem('currentCartId', cartId);\r\n  \r\n      return new Observable(observer => {\r\n        this.http.post<void>(`${this.apiUrl}/create`, cartPayload).subscribe({\r\n          next: () => {\r\n            this.http.post<void>(`${this.apiUrl}/items`, cartItemsPayload).subscribe({\r\n              next: () => {\r\n                this.clearCart(); // Clear the cart after submission\r\n                observer.next();\r\n                observer.complete();\r\n              },\r\n              error: err => {\r\n                console.error('Error submitting cart items:', err);\r\n                observer.error(err);\r\n              }\r\n            });\r\n          },\r\n          error: err => {\r\n            console.error('Error creating cart:', err);\r\n            observer.error(err);\r\n          }\r\n        });\r\n      });\r\n    }\r\n  \r\n    getCartItemsByCartId(cartId: string): Observable<Product[]> {\r\n      return this.http.get<Product[]>(`${this.apiUrl}/items/${cartId}`);\r\n    }\r\n  }\r\n  \r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}