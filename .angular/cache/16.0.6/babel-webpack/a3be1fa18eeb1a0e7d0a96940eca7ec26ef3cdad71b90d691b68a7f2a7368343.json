{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport class AuthService {\n  constructor() {\n    this.user = null;\n    const storedUser = localStorage.getItem('user');\n    if (storedUser) {\n      try {\n        this.user = JSON.parse(storedUser);\n      } catch (error) {\n        console.error('Failed to parse user from localStorage:', error);\n        this.user = null;\n      }\n    }\n  }\n  setUser(user) {\n    this.user = user;\n    localStorage.setItem('user', JSON.stringify(user));\n  }\n  getUser() {\n    return this.user;\n  }\n  getFullName() {\n    if (this.user) {\n      return `${this.user.firstName} ${this.user.lastName}`;\n    }\n    return '';\n  }\n  isAuthenticated() {\n    return !!this.getUser();\n  }\n  logout() {\n    this.user = null;\n    localStorage.removeItem('user');\n  }\n  static #_ = this.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)();\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["AuthService","constructor","user","storedUser","localStorage","getItem","JSON","parse","error","console","setUser","setItem","stringify","getUser","getFullName","firstName","lastName","isAuthenticated","logout","removeItem","_","_2","factory","ɵfac","providedIn"],"sources":["G:\\IsDB- Bisew Class-1\\UI-18-08-24\\UI-Font-01\\src\\app\\Login\\auth.service.ts"],"sourcesContent":["// import { Injectable } from '@angular/core';\r\n// import { HttpClient } from '@angular/common/http';\r\n// import { Observable, BehaviorSubject } from 'rxjs';\r\n// import { map } from 'rxjs/operators';\r\n// import { Router } from '@angular/router';\r\n// import { Login } from './login.model';\r\n\r\n// @Injectable({\r\n//   providedIn: 'root'\r\n// })\r\n// export class AuthService {\r\n//   private currentUserSubject: BehaviorSubject<any>;\r\n//   public currentUser: Observable<any>;\r\n\r\n//   constructor(private http: HttpClient, private router: Router) {\r\n//     const user = JSON.parse(localStorage.getItem('currentUser')!);\r\n//     this.currentUserSubject = new BehaviorSubject<any>(user);\r\n//     this.currentUser = this.currentUserSubject.asObservable();\r\n//   }\r\n\r\n//   login(credentials: Login): Observable<any> {\r\n//     return this.http.post<any>('http://localhost:5000/api/Account/login', credentials)\r\n//       .pipe(\r\n//         map(user => {\r\n//           // Store user details and JWT token in local storage to keep user logged in\r\n//           localStorage.setItem('currentUser', JSON.stringify(user));\r\n//           this.currentUserSubject.next(user);\r\n//           return user;\r\n//         })\r\n//       );\r\n//   }\r\n\r\n//   logout(): void {\r\n//     // Remove user from local storage to log the user out\r\n//     localStorage.removeItem('currentUser');\r\n//     this.currentUserSubject.next(null);\r\n//     this.router.navigate(['/login']);\r\n//   }\r\n\r\n//   get currentUserValue(): any {\r\n//     return this.currentUserSubject.value;\r\n//   }\r\n\r\n//   isAuthenticated(): boolean {\r\n//     return !!this.currentUserValue;\r\n//   }\r\n// }\r\n\r\n//--------------19\r\n\r\n// import { Injectable } from '@angular/core';\r\n// import { BehaviorSubject, Observable } from 'rxjs';\r\n\r\n// @Injectable({\r\n//   providedIn: 'root'\r\n// })\r\n// export class AuthService {\r\n//   private isAuthenticatedSubject = new BehaviorSubject<boolean>(false);\r\n//   private userSubject = new BehaviorSubject<any>(null);\r\n\r\n//   constructor() { }\r\n\r\n//   // Set user data when the user logs in\r\n//   setUser(user: any): void {\r\n//     this.userSubject.next(user);\r\n//     this.isAuthenticatedSubject.next(true);\r\n//   }\r\n\r\n//   // Get user data as an observable\r\n//   getUser(): Observable<any> {\r\n//     return this.userSubject.asObservable();\r\n//   }\r\n\r\n//   // Check if the user is authenticated\r\n//   isAuthenticated(): boolean {\r\n//     return this.isAuthenticatedSubject.value;\r\n//   }\r\n\r\n//   // Logout the user\r\n//   logout(): void {\r\n//     this.isAuthenticatedSubject.next(false);\r\n//     this.userSubject.next(null);\r\n//     // Additional logic for logging out (e.g., clearing tokens)\r\n//   }\r\n// }\r\n// Example of AuthService\r\n\r\n// import { Injectable } from '@angular/core';\r\n\r\n// @Injectable({\r\n//   providedIn: 'root'\r\n// })\r\n// export class AuthService {\r\n//   private user: any = null; // User details stored in service\r\n\r\n//   setUser(user: any): void {\r\n//     this.user = user; // Store user details\r\n//     // Optionally store user in localStorage/sessionStorage\r\n//     localStorage.setItem('user', JSON.stringify(user));\r\n//   }\r\n\r\n//   getUser(): any {\r\n//     return this.user || JSON.parse(localStorage.getItem('user') || 'null');\r\n//   }\r\n\r\n//   isAuthenticated(): boolean {\r\n//     return !!this.getUser();\r\n//   }\r\n\r\n//   logout(): void {\r\n//     this.user = null;\r\n//     localStorage.removeItem('user');\r\n//   }\r\n// }\r\n\r\n//-----------------19\r\n\r\nimport { Injectable } from '@angular/core';\r\n\r\ninterface User {\r\n  firstName: string;\r\n  lastName: string;\r\n  email: string;\r\n  // Add other user properties as needed\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthService {\r\n  private user: User | null = null;\r\n\r\n  constructor() {\r\n    const storedUser = localStorage.getItem('user');\r\n    if (storedUser) {\r\n      try {\r\n        this.user = JSON.parse(storedUser) as User;\r\n      } catch (error) {\r\n        console.error('Failed to parse user from localStorage:', error);\r\n        this.user = null;\r\n      }\r\n    }\r\n  }\r\n\r\n  setUser(user: User): void {\r\n    this.user = user;\r\n    localStorage.setItem('user', JSON.stringify(user));\r\n  }\r\n\r\n  getUser(): User | null {\r\n    return this.user;\r\n  }\r\n\r\n  getFullName(): string {\r\n    if (this.user) {\r\n      return `${this.user.firstName} ${this.user.lastName}`;\r\n    }\r\n    return '';\r\n  }\r\n\r\n  isAuthenticated(): boolean {\r\n    return !!this.getUser();\r\n  }\r\n\r\n  logout(): void {\r\n    this.user = null;\r\n    localStorage.removeItem('user');\r\n  }\r\n}\r\n"],"mappings":";AAiIA,OAAM,MAAOA,WAAW;EAGtBC,YAAA;IAFQ,KAAAC,IAAI,GAAgB,IAAI;IAG9B,MAAMC,UAAU,GAAGC,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC;IAC/C,IAAIF,UAAU,EAAE;MACd,IAAI;QACF,IAAI,CAACD,IAAI,GAAGI,IAAI,CAACC,KAAK,CAACJ,UAAU,CAAS;OAC3C,CAAC,OAAOK,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,yCAAyC,EAAEA,KAAK,CAAC;QAC/D,IAAI,CAACN,IAAI,GAAG,IAAI;;;EAGtB;EAEAQ,OAAOA,CAACR,IAAU;IAChB,IAAI,CAACA,IAAI,GAAGA,IAAI;IAChBE,YAAY,CAACO,OAAO,CAAC,MAAM,EAAEL,IAAI,CAACM,SAAS,CAACV,IAAI,CAAC,CAAC;EACpD;EAEAW,OAAOA,CAAA;IACL,OAAO,IAAI,CAACX,IAAI;EAClB;EAEAY,WAAWA,CAAA;IACT,IAAI,IAAI,CAACZ,IAAI,EAAE;MACb,OAAO,GAAG,IAAI,CAACA,IAAI,CAACa,SAAS,IAAI,IAAI,CAACb,IAAI,CAACc,QAAQ,EAAE;;IAEvD,OAAO,EAAE;EACX;EAEAC,eAAeA,CAAA;IACb,OAAO,CAAC,CAAC,IAAI,CAACJ,OAAO,EAAE;EACzB;EAEAK,MAAMA,CAAA;IACJ,IAAI,CAAChB,IAAI,GAAG,IAAI;IAChBE,YAAY,CAACe,UAAU,CAAC,MAAM,CAAC;EACjC;EAAC,QAAAC,CAAA,G;qBAtCUpB,WAAW;EAAA;EAAA,QAAAqB,EAAA,G;WAAXrB,WAAW;IAAAsB,OAAA,EAAXtB,WAAW,CAAAuB,IAAA;IAAAC,UAAA,EAFV;EAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}